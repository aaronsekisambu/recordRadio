{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { DrawerActions } from '@react-navigation/native';\nimport { navigationRef } from \"../navigation/root-navigation\";\nimport { useDrawerStatus } from '@react-navigation/drawer';\nvar useDrawer = function useDrawer() {\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isDrawerOpen = _React$useState2[0],\n    setIsDrawerOpen = _React$useState2[1];\n  var drawerOpen = useDrawerStatus() === 'open';\n  React.useEffect(function () {\n    if (drawerOpen) {\n      setIsDrawerOpen(true);\n    } else {\n      setIsDrawerOpen(false);\n    }\n  }, [drawerOpen]);\n  var openDrawer = function openDrawer() {\n    if (navigationRef.isReady()) {\n      navigationRef.dispatch(DrawerActions.openDrawer());\n    }\n  };\n  var toggleDrawer = function toggleDrawer() {\n    if (navigationRef.isReady()) {\n      navigationRef.dispatch(DrawerActions.toggleDrawer());\n    }\n  };\n  var closeDrawer = function closeDrawer() {\n    if (navigationRef.isReady()) {\n      navigationRef.dispatch(DrawerActions.closeDrawer());\n    }\n  };\n  return {\n    openDrawer: openDrawer,\n    closeDrawer: closeDrawer,\n    toggleDrawer: toggleDrawer,\n    isDrawerOpen: isDrawerOpen\n  };\n};\nexport default useDrawer;","map":{"version":3,"names":["React","DrawerActions","navigationRef","useDrawerStatus","useDrawer","_React$useState","useState","_React$useState2","_slicedToArray","isDrawerOpen","setIsDrawerOpen","drawerOpen","useEffect","openDrawer","isReady","dispatch","toggleDrawer","closeDrawer"],"sources":["/Users/aaron/Documents/Aaron/Code/recordRadio/src/hooks/useDrawer.ts"],"sourcesContent":["import * as React from 'react';\nimport {DrawerActions} from '@react-navigation/native';\nimport {navigationRef} from 'navigation/root-navigation';\nimport {useDrawerStatus} from '@react-navigation/drawer';\n\nconst useDrawer = () => {\n  const [isDrawerOpen, setIsDrawerOpen] = React.useState(false);\n  const drawerOpen = useDrawerStatus() === 'open';\n\n  React.useEffect(() => {\n    if (drawerOpen) {\n      setIsDrawerOpen(true);\n    } else {\n      setIsDrawerOpen(false);\n    }\n  }, [drawerOpen]);\n  const openDrawer = () => {\n    if (navigationRef.isReady()) {\n      navigationRef.dispatch(DrawerActions.openDrawer());\n    }\n  };\n  const toggleDrawer = () => {\n    if (navigationRef.isReady()) {\n      navigationRef.dispatch(DrawerActions.toggleDrawer());\n    }\n  };\n  const closeDrawer = () => {\n    if (navigationRef.isReady()) {\n      navigationRef.dispatch(DrawerActions.closeDrawer());\n    }\n  };\n\n  return {openDrawer, closeDrawer, toggleDrawer, isDrawerOpen};\n};\nexport default useDrawer;\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAQC,aAAa,QAAO,0BAA0B;AACtD,SAAQC,aAAa;AACrB,SAAQC,eAAe,QAAO,0BAA0B;AAExD,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS;EACtB,IAAAC,eAAA,GAAwCL,KAAK,CAACM,QAAQ,CAAC,KAAK,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAAtDI,YAAY,GAAAF,gBAAA;IAAEG,eAAe,GAAAH,gBAAA;EACpC,IAAMI,UAAU,GAAGR,eAAe,CAAC,CAAC,KAAK,MAAM;EAE/CH,KAAK,CAACY,SAAS,CAAC,YAAM;IACpB,IAAID,UAAU,EAAE;MACdD,eAAe,CAAC,IAAI,CAAC;IACvB,CAAC,MAAM;MACLA,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC,EAAE,CAACC,UAAU,CAAC,CAAC;EAChB,IAAME,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IACvB,IAAIX,aAAa,CAACY,OAAO,CAAC,CAAC,EAAE;MAC3BZ,aAAa,CAACa,QAAQ,CAACd,aAAa,CAACY,UAAU,CAAC,CAAC,CAAC;IACpD;EACF,CAAC;EACD,IAAMG,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;IACzB,IAAId,aAAa,CAACY,OAAO,CAAC,CAAC,EAAE;MAC3BZ,aAAa,CAACa,QAAQ,CAACd,aAAa,CAACe,YAAY,CAAC,CAAC,CAAC;IACtD;EACF,CAAC;EACD,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACxB,IAAIf,aAAa,CAACY,OAAO,CAAC,CAAC,EAAE;MAC3BZ,aAAa,CAACa,QAAQ,CAACd,aAAa,CAACgB,WAAW,CAAC,CAAC,CAAC;IACrD;EACF,CAAC;EAED,OAAO;IAACJ,UAAU,EAAVA,UAAU;IAAEI,WAAW,EAAXA,WAAW;IAAED,YAAY,EAAZA,YAAY;IAAEP,YAAY,EAAZA;EAAY,CAAC;AAC9D,CAAC;AACD,eAAeL,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}