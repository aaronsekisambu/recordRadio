{"ast":null,"code":"import React from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useTheme } from '@ui-kitten/components';\nimport Animated from 'react-native-reanimated';\nimport { useLayout } from \"../../../hooks\";\nimport { Text } from \"../../../components\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar TabBar = function TabBar(_ref) {\n  var style = _ref.style,\n    activeIndex = _ref.activeIndex,\n    onChange = _ref.onChange,\n    tabs = _ref.tabs;\n  var theme = useTheme();\n  var AniButton = Animated.createAnimatedComponent(TouchableOpacity);\n  var _useLayout = useLayout(),\n    width = _useLayout.width;\n  var changeIndex = React.useCallback(function (i) {\n    return onChange(i);\n  }, [activeIndex]);\n  var refScrollView = React.useRef(null);\n  React.useEffect(function () {\n    var _refScrollView$curren;\n    (_refScrollView$curren = refScrollView.current) == null ? void 0 : _refScrollView$curren.scrollTo({\n      x: activeIndex * 120 + 8 - (width - 250) / 2,\n      animated: true\n    });\n  }, [activeIndex]);\n  return _jsx(View, {\n    children: _jsx(ScrollView, {\n      contentContainerStyle: [styles.container, style],\n      horizontal: true,\n      showsHorizontalScrollIndicator: false,\n      ref: refScrollView,\n      children: tabs.map(function (item, index) {\n        var isActive = activeIndex === index;\n        return _jsx(AniButton, {\n          style: [styles.btn, {\n            borderColor: theme['background-basic-color-2'],\n            backgroundColor: isActive ? theme['color-primary-default'] : theme['background-basic-color-2']\n          }],\n          onPress: function onPress() {\n            return changeIndex(index);\n          },\n          activeOpacity: 0.7,\n          children: _jsx(Text, {\n            capitalize: true,\n            category: \"h6\",\n            status: isActive ? 'white' : 'platinum',\n            children: item\n          })\n        }, index);\n      })\n    })\n  });\n};\nexport default TabBar;\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignSelf: 'center',\n    marginTop: 16,\n    marginBottom: 8,\n    marginLeft: 16\n  },\n  btn: {\n    marginRight: 8,\n    flexDirection: 'row',\n    borderRadius: 16,\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    gap: 4\n  }\n});","map":{"version":3,"names":["React","ScrollView","StyleSheet","TouchableOpacity","View","useTheme","Animated","useLayout","Text","jsx","_jsx","TabBar","_ref","style","activeIndex","onChange","tabs","theme","AniButton","createAnimatedComponent","_useLayout","width","changeIndex","useCallback","i","refScrollView","useRef","useEffect","_refScrollView$curren","current","scrollTo","x","animated","children","contentContainerStyle","styles","container","horizontal","showsHorizontalScrollIndicator","ref","map","item","index","isActive","btn","borderColor","backgroundColor","onPress","activeOpacity","capitalize","category","status","create","flexDirection","alignSelf","marginTop","marginBottom","marginLeft","marginRight","borderRadius","paddingVertical","paddingHorizontal","gap"],"sources":["/Users/aaron/Documents/Aaron/Code/recordRadio/src/screens/Food/elements/TabBarScrollable.tsx"],"sourcesContent":["import React from 'react';\nimport { ScrollView, StyleSheet, TouchableOpacity, ViewStyle, View } from 'react-native';\nimport { useTheme } from '@ui-kitten/components';\nimport Animated from 'react-native-reanimated';\nimport { useLayout } from 'hooks';\nimport { Text } from 'components';\n\ninterface ITabBarProps {\n  tabs: string[];\n  level?: string;\n  style?: ViewStyle;\n  activeIndex: number;\n  onChange(index: number): void;\n}\n\nconst TabBar = ({ style, activeIndex, onChange, tabs }: ITabBarProps) => {\n  const theme = useTheme();\n  const AniButton = Animated.createAnimatedComponent(TouchableOpacity);\n  const { width } = useLayout();\n  const changeIndex = React.useCallback(\n    (i: number) => {\n      return onChange(i);\n    },\n    [activeIndex],\n  );\n  const refScrollView = React.useRef<ScrollView>(null);\n  React.useEffect(() => {\n    refScrollView.current?.scrollTo({\n      x: activeIndex * 120 + 8 - (width - 250) / 2,\n      animated: true,\n    });\n  }, [activeIndex]);\n  return (\n    <View>\n      <ScrollView\n        contentContainerStyle={[styles.container, style]}\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        ref={refScrollView}>\n        {tabs.map((item, index) => {\n          const isActive = activeIndex === index;\n          return (\n            <AniButton\n              key={index}\n              style={[\n                styles.btn,\n                {\n                  borderColor: theme['background-basic-color-2'],\n                  backgroundColor: isActive\n                    ? theme['color-primary-default']\n                    : theme['background-basic-color-2'],\n                },\n              ]}\n              onPress={() => changeIndex(index)}\n              activeOpacity={0.7}>\n              <Text capitalize category=\"h6\" status={isActive ? 'white' : 'platinum'}>\n                {item}\n              </Text>\n            </AniButton>\n          );\n        })}\n      </ScrollView>\n    </View>\n  );\n};\n\nexport default TabBar;\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignSelf: 'center',\n    marginTop: 16,\n    marginBottom: 8,\n    marginLeft: 16,\n  },\n  btn: {\n    marginRight: 8,\n    flexDirection: 'row',\n    borderRadius: 16,\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n    gap: 4,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}