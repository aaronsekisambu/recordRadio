{"ast":null,"code":"import * as React from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { StyleService, useTheme, Icon, Avatar } from '@ui-kitten/components';\nimport { Images } from \"../assets/images\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RoundedButton = React.memo(function (_ref) {\n  var onPress = _ref.onPress,\n    _ref$status = _ref.status,\n    status = _ref$status === void 0 ? 'basic' : _ref$status,\n    _ref$icon = _ref.icon,\n    icon = _ref$icon === void 0 ? 'arrow-right' : _ref$icon,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 56 : _ref$size,\n    _ref$activeOpacity = _ref.activeOpacity,\n    activeOpacity = _ref$activeOpacity === void 0 ? 0.7 : _ref$activeOpacity,\n    style = _ref.style,\n    isBasic = _ref.isBasic;\n  var theme = useTheme();\n  var getColor = function getColor() {\n    switch (status) {\n      case 'basic':\n        return theme['color-basic-200'];\n      case 'white':\n        return theme['color-basic-1100'];\n      case 'primary':\n        return theme['color-primary-300'];\n      case 'placeholder':\n        return theme['color-primary-default'] + \"30\";\n      case 'transparent':\n        return theme['color-primary-default'];\n    }\n  };\n  var getTintColor = function getTintColor() {\n    switch (status) {\n      case 'basic':\n        return theme['text-primary-color'];\n      case 'primary':\n        return theme['text-basic-color'];\n      case 'placeholder':\n        return theme['color-primary-default'];\n      case 'transparent':\n        return theme['text-basic-color'];\n    }\n  };\n  return _jsxs(TouchableOpacity, {\n    activeOpacity: activeOpacity,\n    onPress: onPress,\n    style: [{\n      width: size,\n      height: size,\n      justifyContent: 'center',\n      alignItems: 'center'\n    }, style],\n    children: [_jsx(Avatar, {\n      shape: \"rounded\",\n      source: Images.rounded,\n      style: {\n        width: size,\n        height: size,\n        tintColor: getColor(),\n        zIndex: -10,\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0\n      }\n    }), status === 'transparent' && _jsx(Avatar, {\n      shape: \"rounded\",\n      source: Images.rounded,\n      style: {\n        width: size - 2,\n        height: size - 2,\n        tintColor: theme['background-basic-color-1'],\n        zIndex: -10,\n        position: 'absolute',\n        top: 1,\n        left: 1,\n        right: 1,\n        bottom: 1\n      }\n    }), _jsx(Icon, {\n      pack: \"assets\",\n      name: icon,\n      style: {\n        width: 20,\n        height: 20,\n        zIndex: 100,\n        tintColor: isBasic ? null : getTintColor()\n      }\n    })]\n  });\n});\nexport default RoundedButton;\nvar themedStyles = StyleService.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","TouchableOpacity","StyleService","useTheme","Icon","Avatar","Images","jsx","_jsx","jsxs","_jsxs","RoundedButton","memo","_ref","onPress","_ref$status","status","_ref$icon","icon","_ref$size","size","_ref$activeOpacity","activeOpacity","style","isBasic","theme","getColor","getTintColor","width","height","justifyContent","alignItems","children","shape","source","rounded","tintColor","zIndex","position","top","left","right","bottom","pack","name","themedStyles","create","container","flex"],"sources":["/Users/aaron/Documents/Aaron/Code/recordRadio/src/components/RoundedButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { TouchableOpacity, Image, StyleProp, ViewStyle } from 'react-native';\nimport { StyleService, useTheme, Icon, Avatar, Layout } from '@ui-kitten/components';\nimport { Images } from 'assets/images';\n\ninterface IRoundedButtonProps {\n  onPress?(): void;\n  status?: 'basic' | 'placeholder' | 'primary' | 'transparent' | 'white';\n  icon?: string;\n  size?: number;\n  activeOpacity?: number;\n  style?: StyleProp<ViewStyle>;\n  isBasic?: boolean;\n}\n\nconst RoundedButton = React.memo(\n  ({\n    onPress,\n    status = 'basic',\n    icon = 'arrow-right',\n    size = 56,\n    activeOpacity = 0.7,\n    style,\n    isBasic,\n  }: IRoundedButtonProps) => {\n    const theme = useTheme();\n\n    const getColor = () => {\n      switch (status) {\n        case 'basic':\n          return theme['color-basic-200'];\n        case 'white':\n          return theme['color-basic-1100'];\n        case 'primary':\n          return theme['color-primary-300'];\n        case 'placeholder':\n          return `${theme['color-primary-default']}30`;\n        case 'transparent':\n          return theme['color-primary-default'];\n      }\n    };\n    const getTintColor = () => {\n      switch (status) {\n        case 'basic':\n          return theme['text-primary-color'];\n        case 'primary':\n          return theme['text-basic-color'];\n        case 'placeholder':\n          return theme['color-primary-default'];\n        case 'transparent':\n          return theme['text-basic-color'];\n      }\n    };\n    return (\n      <TouchableOpacity\n        activeOpacity={activeOpacity}\n        onPress={onPress}\n        style={[\n          {\n            width: size,\n            height: size,\n            justifyContent: 'center',\n            alignItems: 'center',\n          },\n          style,\n        ]}>\n        <Avatar\n          shape=\"rounded\"\n          source={Images.rounded}\n          style={{\n            width: size,\n            height: size,\n            tintColor: getColor(),\n            zIndex: -10,\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n          }}\n        />\n        {status === 'transparent' && (\n          <Avatar\n            shape=\"rounded\"\n            source={Images.rounded}\n            style={{\n              width: size - 2,\n              height: size - 2,\n              tintColor: theme['background-basic-color-1'],\n              zIndex: -10,\n              position: 'absolute',\n              top: 1,\n              left: 1,\n              right: 1,\n              bottom: 1,\n            }}\n          />\n        )}\n        <Icon\n          pack=\"assets\"\n          name={icon}\n          style={{\n            width: 20,\n            height: 20,\n            zIndex: 100,\n            tintColor: isBasic ? null : getTintColor(),\n          }}\n        />\n      </TouchableOpacity>\n    );\n  },\n);\n\nexport default RoundedButton;\n\nconst themedStyles = StyleService.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}